# https://docs.docker.com/reference/compose-file/version-and-name/#name-top-level-element
name: testapp

services:
  test:
    # We can either name a directory with a Dockerfile in it to get build instructions from or
    # define them ourselves inline.
    # If no service.image element is defined, compose will not push the result of the build to
    # Docker Hub
    # https://docs.docker.com/reference/compose-file/build/#context
    build:
      dockerfile_inline: |
        FROM node:alpine
        WORKDIR /app
        COPY . .
        RUN ls
    secrets:
      - source: sec1
        target: "/app/secrets/sec1"
    # Syncs changes to the demo.js file, then restarts the container
    # https://docs.docker.com/reference/compose-file/develop/
    develop:
      watch:
        - path: .
          action: sync+restart
          target: /app
    environment:
      HOST: localhost
      PORT: 80
      FRONTEND: http://localhost:8080
    ports:
      - "8080:80"
    # Containers should not be left with the root (default) user if possible for security reasons.
    # https://github.com/nodejs/docker-node/blob/main/docs/BestPractices.md#non-root-user
    user: node
    # `init: true` is generally required by Node applications because Node does not behave well
    # when it is PID 1
    # Source: https://github.com/nodejs/docker-node/blob/main/docs/BestPractices.md#handling-kernel-signals
    init: true
    # entrypoint defines the program to run once the image is built
    # command defines the arguments we wish to supply to the program
    entrypoint: "node"
    command: "demo"
    # tty allows us to keep the service running instead of stopping after executing its program as it
    # does by default.  We need to ensure the program has an infinite loop for this to work.  By
    # keeping the container running, we allow ourselves to inspect it in Docker Desktop
    tty: true

secrets:
  sec1:
    file: secrets